{
  "README.html": {
    "href": "README.html",
    "title": "ASE Portfolio | ASE Project",
    "keywords": "ASE Portfolio Fill in the fields below. Name : Aakanksha Bhatta Your Group : Group B Your Tutor Keep your progress up to date below. Put \"DONE\" after each section, when you have done it. Checkpoint 1 Version Control (1) 5 marks At least two documented commits to provided on GitHub Classroom BEFORE 12pm 7th October. At least 5 documented commits. Readme.md file filled in correctly. 2 Unit Tests for basic drawing commands above (1) 5 marks Unit Test for moveto command (variables storing pen position are correct) Unit Test for drawTo command (variables storing pen position are correct) Unit Test for a multiline program. 3 XML Comments/documentation produced (1) 5 marks* Fully documented with XML comments and Documentation web site produced 4 Exception Handling (1) 5 marks* 5 Library (DLL) installed and working with reasonable user interface (2) 10 marks Form interface with program window, output window and run button BOOSE DLL library installed call about method and display returned information in output/debug window you can use System.Diagnostics to output to the debug window 6 Basic drawing commands of the library are implemented (2) 10 marks Moveto, circle, rect, pencolour, write. Unrestricted drawing programs can be run (1unrestrictedDrawing.boose) Tutor's Feedback Final Submission 1 Further Version Control (1) 5 marks You must continue to use VC to a professional standard with frequent and clear commits Your Readme.md must be up to date 2 Use of Interfaces (1) 5 marks Interfaces to be used for all classes where appropriate 3 Further Unit Testing (1) 5 marks Tests for full program all of the facilities completed in 5,6 and 7 below It is up to you how design your tests (i.e. one test per facility or one test testing many but they must be clearly documented with XML comments) 4 Design Patterns (1) 5 marks Use of factory Design Pattern for command creation Demonstrate the use of another design pattern of your choice (for 5,6 and 7 you can click the links to see the example BOOSE programs that must be run, these are in your Portfolio. You must run the unrestricted programs and replace the image already there with an image of your BOOSE Interpreter running the BOOSE programs. You may show further programs in your portfolio.) 5 Replaced variables (2) Int 4 marks Real 4 marks Array 5 marks 6 Replaced if, while, for (2) While 5 marks For 6 marks If else 6 marks 7 Replaced Methods (2) 5 marks 8 Additional (web version, text-based version, extension to BOOSE itself, etc, discuss with your tutor) (2) 10 marks Tutor's Feedback note Remember that the BOOSE library is a work in progress and is likely to have bug fixes and updates. Check Discord and/or myBeckett to see if updates have been released. Report any bugs to @dmullier\\ v1.0"
  },
  "api/ASE_PROJECT_ASSESMENT.AboutUs.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AboutUs.html",
    "title": "Class AboutUs | ASE Project",
    "keywords": "Class AboutUs Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll public class AboutUs : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form AboutUs Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AboutUs() public AboutUs() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_PROJECT_ASSESMENT.AppCanvas.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppCanvas.html",
    "title": "Class AppCanvas | ASE Project",
    "keywords": "Class AppCanvas Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Implements the ICanvas interface. Represents the application canvas for drawing shapes lines and text. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default settings. public AppCanvas() Fields XCanvasSize public int XCanvasSize Field Value int YCanvasSize public int YCanvasSize Field Value int filled public bool filled Field Value bool Properties Filled Gets or sets the filled state for drawing shapes. Uses global configuration for synchronization. public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color. public object PenColour { get; set; } Property Value object Xpos Gets or sets the X-coordinate of the pen position. public int Xpos { get; set; } Property Value int Ypos Gets or sets the Y-coordinate of the pen position. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle with the specified radius and filled state. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. filled bool If true, the circle is filled; otherwise, it is outlined. Clear() Clears the canvas and fills it with a gray background. public void Clear() DrawTo(int, int) Draws a line from the current pen position to the specified coordinates. public void DrawTo(int toX, int toY) Parameters toX int The X-coordinate to draw to. toY int The Y-coordinate to draw to. MoveTo(int, int) Moves the pen position to the specified coordinates. public void MoveTo(int x, int y) Parameters x int The X-coordinate to move to. y int The Y-coordinate to move to. Rect(int, int, bool) Draws a rectangle with the specified width, height, and filled state. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool If true, the rectangle is filled; otherwise, it is outlined. Reset() Resets the pen position to the top-left corner of the canvas. public void Reset() Set(int, int) Sets the canvas size and initializes the graphics context. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas. ysize int The height of the canvas. SetColour(int, int, int) Sets the pen color using RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component (0-255). green int The green component (0-255). blue int The blue component (0-255). Tri(int, int) Draws a triangle with the specified width and height. public void Tri(int width, int height) Parameters width int The base width of the triangle. height int The height of the triangle. WriteText(string) Writes text at the current pen position. public void WriteText(string text) Parameters text string The text to write. getBitmap() Gets the current bitmap representing the canvas. public object getBitmap() Returns object The current bitmap object."
  },
  "api/ASE_PROJECT_ASSESMENT.AppCast.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppCast.html",
    "title": "Class AppCast | ASE Project",
    "keywords": "Class AppCast Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Command to perform a type cast operation from one variable type to another. This command casts an integer variable to a real (floating point) variable. public class AppCast : Command, ICommand Inheritance object Command AppCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Checks the parameters passed to the command, ensuring exactly two variables are provided. public override void CheckParameters(string[] parameter) Parameters parameter string[] Array of strings representing the parameters passed to the command. Exceptions CommandException Thrown if the number of parameters is incorrect. Compile() Compiles the command by validating the existence of the source and target variables and checking for type compatibility. public override void Compile() Exceptions CommandException Thrown if one or both variables do not exist or if type casting is invalid. Execute() Executes the cast operation by transferring the value from the source variable (int) to the target variable (real). public override void Execute() Exceptions CommandException Thrown if there is a mismatch in variable types."
  },
  "api/ASE_PROJECT_ASSESMENT.AppElse.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppElse.html",
    "title": "Class AppElse | ASE Project",
    "keywords": "Class AppElse Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents the \"Else\" compound command in a program, which is executed when the corresponding \"If\" or \"While\" condition is false. public class AppElse : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppElse Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrespondingEnd Gets or sets the corresponding \"End\" command associated with this \"Else\" command. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters passed to the \"Else\" command. Ensures there is exactly one parameter, which should be \"else\". public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters to validate. Exceptions CommandException Thrown if the parameters are invalid. Compile() Prepares the \"Else\" command for execution by compiling it. Sets the corresponding command (e.g., If or While), assigns line numbers, and pushes the command back onto the program stack. public override void Compile() Execute() Executes the \"Else\" command. If the condition of the corresponding command is true, the Else block is skipped. Otherwise, the Else block is executed, and the program counter is updated to jump to the end of the Else block. public override void Execute()"
  },
  "api/ASE_PROJECT_ASSESMENT.AppFor.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppFor.html",
    "title": "Class AppFor | ASE Project",
    "keywords": "Class AppFor Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents the \"For\" loop structure, extending the base For class. This class adds the capability to reset or decrease a specific internal counter during the execution of the loop. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the \"For\" loop, calling the base execution method, and then resets or decreases the counter. public override void Execute() ResetOrDecreaseCount(int) Resets or decreases a specific internal counter (꿁) by setting it to a new value. This field is accessed using reflection due to its private and static nature. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to assign to the internal counter."
  },
  "api/ASE_PROJECT_ASSESMENT.AppIf.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppIf.html",
    "title": "Class AppIf | ASE Project",
    "keywords": "Class AppIf Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll public class AppIf : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppIf Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.Compile() ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Constructor for AppIf without instance restrictions. public AppIf() Methods ReduceRestrictions() Overrides the ReduceRestrictions method to do nothing, removing the restriction logic. protected void ReduceRestrictions()"
  },
  "api/ASE_PROJECT_ASSESMENT.AppPeek.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppPeek.html",
    "title": "Class AppPeek | ASE Project",
    "keywords": "Class AppPeek Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents the \"Peek\" operation on an array, which retrieves the value from a specific index. In this class, the \"Peek\" operation allows you to access the value of an array element and update a variable with the value at that index. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPeek Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the parameters passed to the Peek operation. This method is currently not implemented and will throw an exception if called. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters passed to the Peek operation. Exceptions NotImplementedException Thrown when the method is called, as parameter validation is not implemented. Compile() Compiles the Peek operation by processing the array parameters and preparing the operation for execution. This method specifically sets up the operation for a \"peek\" (read) operation on the array. public override void Compile() Execute() Executes the Peek operation by retrieving the value from the array and updating the corresponding variable. The value retrieved from the array is based on the type (e.g., int or real) and is then used to update a variable. public override void Execute() Exceptions CommandException Thrown if the array type is unsupported for the Peek operation."
  },
  "api/ASE_PROJECT_ASSESMENT.AppPoke.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppPoke.html",
    "title": "Class AppPoke | ASE Project",
    "keywords": "Class AppPoke Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents the \"Poke\" operation on an array, which updates the value at a specific index in the array. This class handles parameter validation, compilation of the poke operation, and its execution. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPoke Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the parameters passed to the Poke operation. The operation requires two or three parameters: The array variable to be updated. The index at which to update the array. The value to be placed in the array (optional, depending on the implementation). public override void CheckParameters(string[] parameter) Parameters parameter string[] Array of parameters for the Poke operation. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the Poke operation by processing the array parameters. This method prepares the operation for execution by calling the appropriate array processing methods. public override void Compile() Execute() Executes the Poke operation by updating the value at the specified index in the array. It uses the processed array parameters to update the correct element in the array. public override void Execute() Set(StoredProgram, string) Sets the program and parameters for the Poke operation. This method initializes the Poke operation with the provided program and parameters. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The stored program that contains the array and variable data. paramsList string A string containing the parameters for the Poke operation."
  },
  "api/ASE_PROJECT_ASSESMENT.AppWhile.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.AppWhile.html",
    "title": "Class AppWhile | ASE Project",
    "keywords": "Class AppWhile Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents the \"AppWhile\" operation on an array, which updates the value at a specific index in the array. This class handles parameter validation, compilation of the while operation, and its execution. public class AppWhile : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppWhile Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.Compile() ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Constructor for AppIf without instance restrictions. public AppWhile() Methods ReduceRestrictions() Overrides the ReduceRestrictions method to do nothing, removing the restriction logic. protected void ReduceRestrictions()"
  },
  "api/ASE_PROJECT_ASSESMENT.Array.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.Array.html",
    "title": "Class Array | ASE Project",
    "keywords": "Class Array Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents a command that can be executed in the application. public class Array : ICommand Inheritance object Array Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanExecute(object) Determines whether the command can execute based on the parameter. public bool CanExecute(object parameter) Parameters parameter object The parameter to check. Returns bool True if the command can execute, otherwise false. Execute(object) Executes the command. public void Execute(object parameter) Parameters parameter object The parameter to pass during execution. RaiseCanExecuteChanged() Notifies the UI that the CanExecute state has changed. public void RaiseCanExecuteChanged() Events CanExecuteChanged Event to notify when the CanExecuteChanged state changes. public event EventHandler CanExecuteChanged Event Type EventHandler"
  },
  "api/ASE_PROJECT_ASSESMENT.Clear.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.Clear.html",
    "title": "Class Clear | ASE Project",
    "keywords": "Class Clear Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents the command to clear the canvas. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Initializes a new instance of the Clear class. public Clear() Clear(Canvas) Initializes a new instance of the Clear class with a specified canvas. public Clear(Canvas c) Parameters c Canvas The canvas to clear. Methods CheckParameters(string[]) Validates the parameters for the clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the command. Remarks No validation needed as there are no parameters for this command. Execute() Executes the clear command, clearing the canvas. public override void Execute()"
  },
  "api/ASE_PROJECT_ASSESMENT.CommandParser.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.CommandParser.html",
    "title": "Class CommandParser | ASE Project",
    "keywords": "Class CommandParser Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Handles parsing and processing drawing commands entered by the user. Commands are executed on the provided BOOSE.ICanvas. public class CommandParser Inheritance object CommandParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandParser(ICanvas, TextBox, CommandFactory, StoredProgram) Initializes a new instance of the CommandParser class. public CommandParser(ICanvas canvas, TextBox errorMessageBox, CommandFactory factory, StoredProgram program) Parameters canvas ICanvas The canvas object where drawing operations will be performed. errorMessageBox TextBox The text box to display error messages. factory CommandFactory The command factory used to create commands. program StoredProgram The stored program object for managing stored commands. Methods ProcessCommand(string) Processes a drawing command by parsing and executing it. public void ProcessCommand(string command) Parameters command string The command string to be processed. Exceptions Exception Thrown when an invalid command or argument is provided."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppArray.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppArray.html",
    "title": "Class AppArray | ASE Project",
    "keywords": "Class AppArray Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents an array with integer or real values, supporting various array operations such as assignment (poke) and retrieval (peek) of values. public class AppArray : Evaluation, ICommand Inheritance object Command Evaluation AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. public AppArray() Fields IntValue protected int IntValue Field Value int PEEK protected const bool PEEK = false Field Value bool POKE public const bool POKE = true Field Value bool RealValue protected double RealValue Field Value double columnCurrent protected int columnCurrent Field Value int columnExpression protected string columnExpression Field Value string columnsCount protected int columnsCount Field Value int intArray protected int[,] intArray Field Value int[,] peekValue protected string peekValue Field Value string pokeValue protected string pokeValue Field Value string realArray protected double[,] realArray Field Value double[,] rowCurrent protected int rowCurrent Field Value int rowExpression protected string rowExpression Field Value string rowsCount protected int rowsCount Field Value int type protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Contains array restrictions to limit the types of arrays that can be defined. public void ArrayRestrictions() CheckParameters(string[]) Checks the array parameters to ensure that they are valid. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to check. Compile() Compiles the array definition and checks for errors in parameters. public override void Compile() Execute() Executes the array creation process, allocating memory for the array. public override void Execute() GetIntArray(int, int) Gets the value at the specified row and column for an integer array. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The value at the specified location in the integer array. GetRealArray(int, int) Gets the value at the specified row and column for a real array. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The value at the specified location in the real array. ProcessArrayParametersCompile(bool) Processes array parameters during compilation for poke or peek operations. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke (write) or peek (read). ProcessArrayParametersExecute(bool) Resolves and processes array parameters during execution for poke or peek operations. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates if the operation is a poke (write) or peek (read). ReduceRestrictionCounter() Reduces the restriction counter when an array is modified or used. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets the value at the specified row and column for an integer array. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. SetRealArray(double, int, int) Sets the value at the specified row and column for a real array. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppBoolean.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppBoolean.html",
    "title": "Class AppBoolean | ASE Project",
    "keywords": "Class AppBoolean Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents an extension or specialized version of the BOOSE.Boolean class. This class allows customization and overrides the instance restrictions for Boolean-related operations. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Override of the Restrictions() method to remove the instance creation restriction. This method intentionally bypasses the restriction that is typically imposed on instance creation. public virtual void Restrictions()"
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppCommandConditional.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppCommandConditional.html",
    "title": "Class AppCommandConditional | ASE Project",
    "keywords": "Class AppCommandConditional Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents a conditional command that modifies the state of a private static field in the BOOSE.Boolean class. This class extends BOOSE.ConditionalCommand and adds functionality to reset or modify a field. public class AppCommandConditional : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCommandConditional Implements ICommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the private static field to 0. public override void Execute() Examples var command = new AppCommandConditional(); command.Execute(); Remarks This method overrides the BOOSE.ConditionalCommand.Execute() method to include resetting the value of the private static field 꿁 to 0 after executing the base command. This ensures that the field is always reset after the command is executed. ResetOrDecreaseCount(int) Resets or decreases the value of a private static field in the BOOSE.Boolean class. This method accesses the private static field 꿁 using reflection and updates its value. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var command = new AppCommandConditional(); command.ResetOrDecreaseCount(5); Remarks This method uses reflection to access and modify the value of the private static field 꿁 in the BOOSE.Boolean class. It is important to ensure that the field exists and can be accessed properly via reflection. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppCommandFactory.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Project",
    "keywords": "Class AppCommandFactory Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Factory class to create command objects based on input strings. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a command object based on the given command string. public override ICommand MakeCommand(string command) Parameters command string The name of the command to create. Returns ICommand An instance of a class implementing BOOSE.ICommand corresponding to the command name. Exceptions ArgumentException Thrown when the command string is null, empty, or whitespace. FactoryException Thrown when the command is not supported by the factory."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppCompoundCommand.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppCompoundCommand.html",
    "title": "Class AppCompoundCommand | ASE Project",
    "keywords": "Class AppCompoundCommand Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents a compound command that is associated with a corresponding conditional command. This class extends BOOSE.ConditionalCommand and manages a conditional command's lifecycle and parameters, validating them before execution. public class AppCompoundCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand Implements ICommand Derived AppElse AppIf AppWhile AppEnd Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCompoundCommand() Constructor for AppCompoundCommand without instance restrictions. This constructor does not enforce any instance count restrictions. public AppCompoundCommand() Properties CorrespondingCommand Property to get or set the corresponding conditional command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Method to validate the parameters passed to the command. This ensures that only one valid parameter is passed. public override void CheckParameters(string[] parameters) Parameters parameters string[] Array of parameters to validate. Examples var command = new AppCompoundCommand(); string[] parameters = { \"ifEnd\" }; command.CheckParameters(parameters); Remarks This method checks that the parameters array contains exactly one string, and the string must contain one of the specified 'end' markers. Exceptions CommandException Thrown if the number of parameters is not exactly one, or if the parameter does not contain a valid 'end' marker such as 'ifEnd', 'whileEnd', 'forEnd', or 'methodEnd'. Compile() Compile method to prepare the command for execution. This method extends the BOOSE.ConditionalCommand.Compile() method to include additional compilation logic, if needed. public override void Compile()"
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppEnd.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppEnd.html",
    "title": "Class AppEnd | ASE Project",
    "keywords": "Class AppEnd Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents the 'End' command in the program, which is used to handle the end of conditional statements, loops, and methods. This class extends AppCompoundCommand and manages the execution and compilation of 'End' commands. public class AppEnd : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppEnd Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Constructor for AppEnd that reduces restrictions if needed. The constructor ensures that no additional restrictions are applied when creating an instance of the End command. public AppEnd() Methods Compile() Prepares the 'End' command for execution by validating its parameters and setting up the corresponding command. This method pops the corresponding command (e.g., If, While, For) from the program stack and validates the syntax. public override void Compile() Examples var endCommand = new AppEnd(); endCommand.Compile(); Remarks This method sets up the corresponding conditional, loop, or method command by validating its type and ensuring that the correct parameter (e.g., 'ifEnd', 'whileEnd', 'forEnd') is provided in the command. Exceptions CommandException Thrown when the parameter does not match the expected syntax for the corresponding command (If, While, For). Execute() Executes the 'End' command during runtime by handling different control structures: loops (While, For) and methods. It updates the program counter (PC) and handles loop conditions and method returns. public override void Execute() Examples var endCommand = new AppEnd(); endCommand.Execute(); Remarks This method handles the program flow when a loop or method is encountered. It adjusts the program counter for While and For loops, and returns to the method’s return line if a method is encountered. Exceptions CommandException Thrown when a loop control variable does not exist, or when loop conditions are invalid."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppInt.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppInt.html",
    "title": "Class AppInt | ASE Project",
    "keywords": "Class AppInt Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents an integer command in the program, extending the BOOSE.Int class. This class is used to handle integer-related functionality, providing any additional restrictions or customizations. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Method to enforce any restrictions on the instance, if required. This method can be overridden to customize or apply specific restrictions on the AppInt class. public virtual void Restrictions() Examples var appInt = new AppInt(); appInt.Restrictions(); Remarks The base implementation doesn't enforce any restrictions. This method is available to override in case specific restrictions need to be applied to the instance."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppMethod.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppMethod.html",
    "title": "Class AppMethod | ASE Project",
    "keywords": "Class AppMethod Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents a method command in the program, extending the BOOSE.Method class. This class handles the initialization of methods, including reducing restrictions and resetting counts. public class AppMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method AppMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMethod() Initializes a new instance of the AppMethod class. This constructor reduces restrictions twice and resets various counts associated with the method. public AppMethod() Remarks The constructor calls ReduceRestrictions twice to ensure that the instance is not restricted by the usual restrictions. Additionally, it resets internal counts, including those related to method and boolean field values. Methods ResetOrDecreaseCount(int) Resets or decreases the count for a private static field in the BOOSE.Boolean class. This method accesses the private static field 뇀 and sets its value. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseCount(5); Remarks This method uses reflection to access and modify the private static field 뇀 in the BOOSE.Boolean class. If the field cannot be accessed, an exception is thrown. Exceptions BOOSEException Thrown when the private field 뇀 cannot be accessed using reflection. ResetOrDecreaseMethodCount(int) Resets or decreases the count for a private static field in the BOOSE.Method class. This method accesses the private static field 뇔 and sets its value. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the private field. Examples var appMethod = new AppMethod(); appMethod.ResetOrDecreaseMethodCount(3); Remarks This method uses reflection to access and modify the private static field 뇔 in the BOOSE.Method class. If the field cannot be accessed, an exception is thrown. Exceptions BOOSEException Thrown when the private field 뇔 cannot be accessed using reflection."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppReal.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppReal.html",
    "title": "Class AppReal | ASE Project",
    "keywords": "Class AppReal Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents a real-number command in the program, extending the BOOSE.Real class. This class manages real-number-related operations, specifically allowing unlimited instances. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Overrides the restriction logic to allow unlimited instances of AppReal. This method is intentionally left blank to avoid enforcing any instance creation limits. public virtual void Restrictions() Examples var appReal1 = new AppReal(); var appReal2 = new AppReal(); // No instance count restrictions applied. Remarks By default, the base class may impose restrictions on the number of instances that can be created. However, this implementation explicitly removes those restrictions, allowing for unlimited instances of AppReal."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppStoredProgram.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.AppStoredProgram.html",
    "title": "Class AppStoredProgram | ASE Project",
    "keywords": "Class AppStoredProgram Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents a stored program that executes a series of commands, manages variables and methods, and interacts with a canvas. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with a specified canvas. public AppStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which the program will be executed. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter, which determines the current command to execute. public virtual int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the program. public virtual int Add(Command C) Parameters C Command Returns int AddMethod(Method) Adds a method to the program's list of methods. public virtual void AddMethod(Method M) Parameters M Method AddVariable(Evaluation) Adds a variable to the program's list of variables. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation Commandsleft() Checks if there are any commands left to execute. public virtual bool Commandsleft() Returns bool DeleteVariable(string) Deletes a variable from the program. public virtual void DeleteVariable(string varName) Parameters varName string EvaluateExpression(string) Evaluates an expression and returns the result. public virtual string EvaluateExpression(string Exp) Parameters Exp string Returns string EvaluateExpressionWithString(string) Evaluates an expression and returns the result as a string. public virtual string EvaluateExpressionWithString(string expression) Parameters expression string Returns string FindVariable(string) Finds the index of a variable by its name. public virtual int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by its name. public virtual Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The method corresponding to the given name. GetVarValue(string) Retrieves the value of a variable as a string. public virtual string GetVarValue(string varName) Parameters varName string Returns string GetVariable(int) public virtual Evaluation GetVariable(int index) Parameters index int Returns Evaluation GetVariable(string) Retrieves a variable by its name. public virtual Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The variable corresponding to the given name. IsExpression(string) Checks if the given string is an expression. public virtual bool IsExpression(string expression) Parameters expression string Returns bool NextCommand() Retrieves the next command from the program. public virtual object NextCommand() Returns object Pop() Pops a conditional command from the stack. public virtual ConditionalCommand Pop() Returns ConditionalCommand Push(ConditionalCommand) Pushes a conditional command onto the stack. public virtual void Push(ConditionalCommand Com) Parameters Com ConditionalCommand ResetProgram() Resets the program to its initial state. public virtual void ResetProgram() Run() Executes the program by processing each command. public override void Run() UpdateVariable(string, bool) Updates a variable's value with a boolean value. public virtual void UpdateVariable(string varName, bool value) Parameters varName string value bool UpdateVariable(string, double) Updates a variable's value with a double value. public virtual void UpdateVariable(string varName, double value) Parameters varName string value double UpdateVariable(string, int) Updates a variable's value with an integer value. public virtual void UpdateVariable(string varName, int value) Parameters varName string value int VariableExists(string) public override bool VariableExists(string varName) Parameters varName string Returns bool"
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.Boolean.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.Boolean.html",
    "title": "Class Boolean | ASE Project",
    "keywords": "Class Boolean Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Represents a static class for Boolean-related functionality. This class may contain Boolean-specific fields and methods. public static class Boolean Inheritance object Boolean Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.ParserProgram.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.ParserProgram.html",
    "title": "Class ParserProgram | ASE Project",
    "keywords": "Class ParserProgram Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Assembly ASE_PROJECT_ASSESMENT.dll Parses commands and programs, validating syntax and structure. public class ParserProgram : IParser Inheritance object ParserProgram Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParserProgram(CommandFactory, StoredProgram) Initializes a new instance of the ParserProgram class. public ParserProgram(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory used to create commands. program StoredProgram The stored program to which the commands will be applied. Methods ParseCommand(string) Parses a single command from the given line of text. public virtual ICommand ParseCommand(string line) Parameters line string The line of text representing a single command. Returns ICommand A compiled command based on the given line of text. Exceptions ParserException Thrown if the command is invalid or the variable does not exist. ParseProgram(string) Parses the entire program and validates each line. public virtual void ParseProgram(string program) Parameters program string The program to be parsed as a string. Exceptions ParserException Thrown if there are syntax errors in the program."
  },
  "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.ComponentsProgram.html",
    "title": "Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram | ASE Project",
    "keywords": "Namespace ASE_PROJECT_ASSESMENT.ComponentsProgram Classes AppArray Represents an array with integer or real values, supporting various array operations such as assignment (poke) and retrieval (peek) of values. AppBoolean Represents an extension or specialized version of the BOOSE.Boolean class. This class allows customization and overrides the instance restrictions for Boolean-related operations. AppCommandConditional Represents a conditional command that modifies the state of a private static field in the BOOSE.Boolean class. This class extends BOOSE.ConditionalCommand and adds functionality to reset or modify a field. AppCommandFactory Factory class to create command objects based on input strings. AppCompoundCommand Represents a compound command that is associated with a corresponding conditional command. This class extends BOOSE.ConditionalCommand and manages a conditional command's lifecycle and parameters, validating them before execution. AppEnd Represents the 'End' command in the program, which is used to handle the end of conditional statements, loops, and methods. This class extends AppCompoundCommand and manages the execution and compilation of 'End' commands. AppInt Represents an integer command in the program, extending the BOOSE.Int class. This class is used to handle integer-related functionality, providing any additional restrictions or customizations. AppMethod Represents a method command in the program, extending the BOOSE.Method class. This class handles the initialization of methods, including reducing restrictions and resetting counts. AppReal Represents a real-number command in the program, extending the BOOSE.Real class. This class manages real-number-related operations, specifically allowing unlimited instances. AppStoredProgram Represents a stored program that executes a series of commands, manages variables and methods, and interacts with a canvas. Boolean Represents a static class for Boolean-related functionality. This class may contain Boolean-specific fields and methods. ParserProgram Parses commands and programs, validating syntax and structure."
  },
  "api/ASE_PROJECT_ASSESMENT.Fill.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.Fill.html",
    "title": "Class Fill | ASE Project",
    "keywords": "Class Fill Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll /// Represents the command to set the filled state of a shape. /// public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fill() /// Initializes a new instance of the Fill class. /// public Fill() Fill(Canvas, string) /// Initializes a new instance of the Fill class with a specified canvas and text. /// public Fill(Canvas c, string text) Parameters c Canvas The canvas to operate on. text string The text parameter to set the filled state. Exceptions ArgumentNullException Thrown if the text parameter is null. Methods CheckParameters(string[]) /// Validates the parameters for the fill command. /// public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the command. Exceptions CommandException /// Thrown if the number of parameters is incorrect or the text parameter is invalid. /// Execute() /// Executes the fill command, setting the filled state of the shape based on the text parameter. /// public override void Execute() Exceptions RestrictionException /// Thrown if the text is null, empty, whitespace, or exceeds the character limit. /// SetFilled(string) public void SetFilled(string isFilledStr) Parameters isFilledStr string"
  },
  "api/ASE_PROJECT_ASSESMENT.Form1.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.Form1.html",
    "title": "Class Form1 | ASE Project",
    "keywords": "Class Form1 Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents the main form for the application. Handles canvas drawing, program execution, and file operations such as load and save. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. Sets up the canvas, command factory, and parser. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_PROJECT_ASSESMENT.Parser.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.Parser.html",
    "title": "Class Parser | ASE Project",
    "keywords": "Class Parser Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Parses commands and programs, validating syntax and structure. public class Parser : IParser Inheritance object Parser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Parser() Default constructor for the Parser class. public Parser() Parser(ICommandFactory, StoredProgram) Initializes a new instance of the Parser class with dependencies. public Parser(ICommandFactory commandFactory, StoredProgram storedProgram) Parameters commandFactory ICommandFactory storedProgram StoredProgram Methods ParseCommand(string) Parses a single line into a command object. public ICommand ParseCommand(string line) Parameters line string Returns ICommand ParseProgram(string) Parses an entire program consisting of multiple lines. public void ParseProgram(string program) Parameters program string"
  },
  "api/ASE_PROJECT_ASSESMENT.Reset.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.Reset.html",
    "title": "Class Reset | ASE Project",
    "keywords": "Class Reset Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Initializes a new instance of the Reset class. public Reset() Reset(Canvas) Initializes a new instance of the Reset class with a specified canvas. public Reset(Canvas c) Parameters c Canvas The canvas to reset. Methods CheckParameters(string[]) Validates the parameters for the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the command. Remarks No validation is needed as there are no parameters for this command. Execute() Executes the reset command, clearing the canvas and returning it to its initial state. public override void Execute()"
  },
  "api/ASE_PROJECT_ASSESMENT.Triangle.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.Triangle.html",
    "title": "Class Triangle | ASE Project",
    "keywords": "Class Triangle Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents a command to draw a triangle on the canvas. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Initializes a new instance of the Triangle class. public Triangle() Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with specified canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The canvas on which the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for the Triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the command. Exceptions CommandException Thrown when the parameter list is invalid. RestrictionException Thrown if parameters are invalid. Execute() Executes the command to draw a triangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown if parameters exceed predefined limits."
  },
  "api/ASE_PROJECT_ASSESMENT.UserGuide.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.UserGuide.html",
    "title": "Class UserGuide | ASE Project",
    "keywords": "Class UserGuide Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll public class UserGuide : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form UserGuide Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UserGuide() public UserGuide() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_PROJECT_ASSESMENT.WriteTo.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.WriteTo.html",
    "title": "Class WriteTo | ASE Project",
    "keywords": "Class WriteTo Namespace ASE_PROJECT_ASSESMENT Assembly ASE_PROJECT_ASSESMENT.dll Represents a command to write text onto the canvas. public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteTo() Initializes a new instance of the WriteTo class. public WriteTo() WriteTo(Canvas, string) Initializes a new instance of the WriteTo class with a canvas and text parameter. public WriteTo(Canvas c, string text) Parameters c Canvas The canvas to write to. text string The text to write. Methods CheckParameters(string[]) Checks the validity of the provided parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to check. Execute() Executes the command to write text to the canvas. public override void Execute()"
  },
  "api/ASE_PROJECT_ASSESMENT.html": {
    "href": "api/ASE_PROJECT_ASSESMENT.html",
    "title": "Namespace ASE_PROJECT_ASSESMENT | ASE Project",
    "keywords": "Namespace ASE_PROJECT_ASSESMENT Classes AboutUs AppCanvas Implements the ICanvas interface. Represents the application canvas for drawing shapes lines and text. AppCast Command to perform a type cast operation from one variable type to another. This command casts an integer variable to a real (floating point) variable. AppElse Represents the \"Else\" compound command in a program, which is executed when the corresponding \"If\" or \"While\" condition is false. AppFor Represents the \"For\" loop structure, extending the base For class. This class adds the capability to reset or decrease a specific internal counter during the execution of the loop. AppIf AppPeek Represents the \"Peek\" operation on an array, which retrieves the value from a specific index. In this class, the \"Peek\" operation allows you to access the value of an array element and update a variable with the value at that index. AppPoke Represents the \"Poke\" operation on an array, which updates the value at a specific index in the array. This class handles parameter validation, compilation of the poke operation, and its execution. AppWhile Represents the \"AppWhile\" operation on an array, which updates the value at a specific index in the array. This class handles parameter validation, compilation of the while operation, and its execution. Array Represents a command that can be executed in the application. Clear Represents the command to clear the canvas. Fill /// Represents the command to set the filled state of a shape. /// Form1 Represents the main form for the application. Handles canvas drawing, program execution, and file operations such as load and save. Reset Triangle Represents a command to draw a triangle on the canvas. UserGuide WriteTo Represents a command to write text onto the canvas."
  },
  "api/TestProject.UnitTest.html": {
    "href": "api/TestProject.UnitTest.html",
    "title": "Class UnitTest | ASE Project",
    "keywords": "Class UnitTest Namespace TestProject Assembly TestProject1.dll This class contains unit tests for the AppCanvas class. It validates the behavior of methods such as BOOSE.MoveTo, BOOSE.DrawTo, SetColour, etc. [TestClass] public class UnitTest Inheritance object UnitTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() Initializes the test environment before each test is run. This method is called before each individual test method. [TestInitialize] public void Setup() TestCanvasInitialization() Tests the initialization of the canvas, verifying its default position and size. [TestMethod] public void TestCanvasInitialization() TestCircle_InvalidRadius() Tests the BOOSE.Circle method with an invalid radius, expecting a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircle_InvalidRadius() TestCircle_ValidRadius() Tests the BOOSE.Circle method with a valid radius. [TestMethod] public void TestCircle_ValidRadius() TestClearCanvas() Tests the Clear method, ensuring that the canvas is reset to its default state. [TestMethod] public void TestClearCanvas() TestDrawTo_InvalidPosition() Tests the BOOSE.DrawTo method with invalid coordinates, expecting a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestDrawTo_InvalidPosition() TestDrawTo_ValidPosition() Tests the BOOSE.DrawTo method with valid coordinates. [TestMethod] public void TestDrawTo_ValidPosition() TestDrawTriangle_InvalidInput() Tests the Tri method with invalid input, expecting a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestDrawTriangle_InvalidInput() TestDrawTriangle_ValidInput() Tests the Tri method for drawing a valid triangle. [TestMethod] public void TestDrawTriangle_ValidInput() TestFilledProperty() Tests the Filled property when set to true. [TestMethod] public void TestFilledProperty() TestFilledPropertyFalse() Tests the Filled property when set to false. [TestMethod] public void TestFilledPropertyFalse() TestMoveTo_InvalidPosition() Tests the BOOSE.MoveTo method with invalid coordinates, expecting a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestMoveTo_InvalidPosition() TestMoveTo_ValidPosition() Tests the BOOSE.MoveTo method with valid coordinates. [TestMethod] public void TestMoveTo_ValidPosition() TestReset() Tests the Reset method, ensuring that the canvas is reset to its initial position. [TestMethod] public void TestReset() TestSetColour_InvalidInput() Tests the SetColour method with invalid RGB values, expecting a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestSetColour_InvalidInput() TestSetColour_ValidInput() Tests the SetColour method with valid RGB values (Blue color). [TestMethod] public void TestSetColour_ValidInput() TestSetInvalidColour() Tests the SetColour method with invalid color setting, expecting a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestSetInvalidColour() TestWriteText_EmptyText() Tests the WriteText method with empty text, expecting a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestWriteText_EmptyText() TestWriteText_ValidInput() Tests the WriteText method with valid input. [TestMethod] public void TestWriteText_ValidInput()"
  },
  "api/TestProject.html": {
    "href": "api/TestProject.html",
    "title": "Namespace TestProject | ASE Project",
    "keywords": "Namespace TestProject Classes UnitTest This class contains unit tests for the AppCanvas class. It validates the behavior of methods such as BOOSE.MoveTo, BOOSE.DrawTo, SetColour, etc."
  },
  "api/TestProject1.ComponentsProgramTest.AppCommandFactoryTest.html": {
    "href": "api/TestProject1.ComponentsProgramTest.AppCommandFactoryTest.html",
    "title": "Class AppCommandFactoryTest | ASE Project",
    "keywords": "Class AppCommandFactoryTest Namespace TestProject1.ComponentsProgramTest Assembly TestProject1.dll This class contains unit tests for the AppCommandFactory class. It tests the functionality of the AppCommandFactory to create the correct command based on the provided command string. [TestClass] public class AppCommandFactoryTest Inheritance object AppCommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the factory instance before each test. [TestInitialize] public void SetUp() TestMakeCommand_ShouldReturnAppFor_ForForCommand() Tests that the factory correctly returns an AppFor command when the string \"for\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnAppFor_ForForCommand() TestMakeCommand_ShouldReturnAppIf_ForIfCommand() Tests that the factory correctly returns an AppIf command when the string \"if\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnAppIf_ForIfCommand() TestMakeCommand_ShouldReturnAppMethod_ForMethodCommand() Tests that the factory correctly returns an AppMethod command when the string \"method\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnAppMethod_ForMethodCommand() TestMakeCommand_ShouldReturnCall_ForCallCommand() Tests that the factory correctly returns a BOOSE.Call command when the string \"call\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnCall_ForCallCommand() TestMakeCommand_ShouldReturnCircle_ForCircleCommand() Tests that the factory correctly returns a BOOSE.Circle command when the string \"circle\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnCircle_ForCircleCommand() TestMakeCommand_ShouldReturnClear_ForClearCommand() Tests that the factory correctly returns a Clear command when the string \"clear\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnClear_ForClearCommand() TestMakeCommand_ShouldReturnFill_ForFillCommand() Tests that the factory correctly returns a Fill command when the string \"fill\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnFill_ForFillCommand() TestMakeCommand_ShouldReturnMoveTo_ForMoveToCommand() Tests that the factory correctly returns a BOOSE.MoveTo command when the string \"moveto\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnMoveTo_ForMoveToCommand() TestMakeCommand_ShouldReturnRectangle_ForRectCommand() Tests that the factory correctly returns a BOOSE.Rect command when the string \"rect\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnRectangle_ForRectCommand() TestMakeCommand_ShouldReturnReset_ForResetCommand() Tests that the factory correctly returns a Reset command when the string \"reset\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnReset_ForResetCommand() TestMakeCommand_ShouldReturnTriangle_ForTriCommand() Tests that the factory correctly returns a Triangle command when the string \"tri\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnTriangle_ForTriCommand() TestMakeCommand_ShouldReturnWriteTo_ForWriteCommand() Tests that the factory correctly returns a WriteTo command when the string \"write\" is provided. [TestMethod] public void TestMakeCommand_ShouldReturnWriteTo_ForWriteCommand() TestMakeCommand_ShouldThrowFactoryException_ForUnknownCommand() Tests that the factory throws a BOOSE.FactoryException when an unknown command is provided. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_ShouldThrowFactoryException_ForUnknownCommand()"
  },
  "api/TestProject1.ComponentsProgramTest.ParserProgramTests.html": {
    "href": "api/TestProject1.ComponentsProgramTest.ParserProgramTests.html",
    "title": "Class ParserProgramTests | ASE Project",
    "keywords": "Class ParserProgramTests Namespace TestProject1.ComponentsProgramTest Assembly TestProject1.dll Unit tests for the ParserProgram class to verify the functionality of its command parsing and program parsing capabilities. [TestClass] public class ParserProgramTests Inheritance object ParserProgramTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing real instances of dependencies for ParserProgram. [TestInitialize] public void SetUp() TestParseCommand_ShouldThrowFactoryException_ForUnknownCommand() Tests the ParseCommand method to ensure it returns a valid command for known commands. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestParseCommand_ShouldThrowFactoryException_ForUnknownCommand() TestParseCommand_ShouldThrowParserException_ForUnknownVariableInAssignment() Tests the ParseCommand method to ensure it throws a ParserException for unknown variables in assignments. [TestMethod] [ExpectedException(typeof(ParserException))] public void TestParseCommand_ShouldThrowParserException_ForUnknownVariableInAssignment() TestParseProgram_ShouldParseValidProgram_Correctly() Tests the ParseProgram method to ensure it parses valid programs correctly. [TestMethod] [ExpectedException(typeof(ParserException))] public void TestParseProgram_ShouldParseValidProgram_Correctly() TestParseProgram_ShouldThrowParserException_ForInvalidProgram() Tests the ParseProgram method to ensure it throws a ParserException for invalid program input. [TestMethod] [ExpectedException(typeof(ParserException))] public void TestParseProgram_ShouldThrowParserException_ForInvalidProgram()"
  },
  "api/TestProject1.ComponentsProgramTest.StoredProgramTest.html": {
    "href": "api/TestProject1.ComponentsProgramTest.StoredProgramTest.html",
    "title": "Class StoredProgramTest | ASE Project",
    "keywords": "Class StoredProgramTest Namespace TestProject1.ComponentsProgramTest Assembly TestProject1.dll This class contains unit tests for the StoredProgramTest class. [TestClass] public class StoredProgramTest Inheritance object StoredProgramTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() [TestInitialize] public void SetUp() TestAddCommand_ShouldAddAndExecuteCommandCorrectly() Test to ensure commands can be added and executed. [TestMethod] public void TestAddCommand_ShouldAddAndExecuteCommandCorrectly() TestAddNullCommand_ShouldThrowException_WhenCommandIsNull() Test to verify that the program handles empty program inputs correctly. [TestMethod] [ExpectedException(typeof(StoredProgramException))] public void TestAddNullCommand_ShouldThrowException_WhenCommandIsNull() TestGetVariable_ShouldThrowException_WhenVariableNotFound() Test to ensure the program handles invalid variable retrieval correctly. [TestMethod] [ExpectedException(typeof(StoredProgramException))] public void TestGetVariable_ShouldThrowException_WhenVariableNotFound() TestRun_ShouldExecuteCommands() Test to verify that the program executes commands correctly. [TestMethod] public void TestRun_ShouldExecuteCommands() TestRun_ShouldThrowException_WhenConditionalCommandsAreUnbalanced() Test to verify that an exception is thrown when there are unbalanced conditional commands. [TestMethod] [ExpectedException(typeof(StoredProgramException))] public void TestRun_ShouldThrowException_WhenConditionalCommandsAreUnbalanced()"
  },
  "api/TestProject1.ComponentsProgramTest.html": {
    "href": "api/TestProject1.ComponentsProgramTest.html",
    "title": "Namespace TestProject1.ComponentsProgramTest | ASE Project",
    "keywords": "Namespace TestProject1.ComponentsProgramTest Classes AppCommandFactoryTest This class contains unit tests for the AppCommandFactory class. It tests the functionality of the AppCommandFactory to create the correct command based on the provided command string. ParserProgramTests Unit tests for the ParserProgram class to verify the functionality of its command parsing and program parsing capabilities. StoredProgramTest This class contains unit tests for the StoredProgramTest class."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Project",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Project",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Project",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}